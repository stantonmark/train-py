
#For loop in python is syntactic sugar for while loop 

# For - used for iterating though and iterable, typically a container 
# Remember lists, sets and tuples have a len() length property  

names = ['Michael Jackson','mark stanton','john smith', 'pat short']
print("\nAs LIST:")
for name in names:
    print(name)
print(len(names))

# List slicing 
# very powerful in python, controls hiw we iterate the list 
# syntax: [startIdx : endIndx : step]


print("\n###As sliced LIST (reversed):")
for name in names[::-1]:
    print(names)


names_set = ['Michael Jackson', 'mark stanton','mark stanton','john smith', 'pat short']
print("\nAs sliced LIST (reversed):")
for name in names_set[::-1]:
    print(names_set)



# looping through dictionary key value pairs 
coords = {"x": 3, "y": 4, "z": 5}

#keys 
for key in coords.keys():
    print(key)
    
#values
for value in coords.values():
    print(value)
    
    
# both keys and values 
for key, value in coords.items():
    print(key, value)
    
#Â for loop for iterating around strings 
word = "opposition"
for letter in word:
    print(letter)
    
# using a range in function  to control nymer of iternatinos
for i in range(1,10):
    print(i)
    
    
# Range function may be used with slicing 
# start index is inclusive and end index is exclusive 
for i in range(5, 51, 5):
    print(i)



# While loops 
# for loops are compiled into while loops at run time 
# while loop needs a counter and include counter and have a stop condition or you while true 

counter = 0 
while counter < len(names):
    print(names[counter])
    counter += 1
    
counter_other = 2
while counter_other < len(names):
    print(names[counter_other])
    if names[counter_other] == 'mark stanton':
        break
    counter_other += 1
else:
    print("loop completed with break statement")
    
    
counter_other = 2
while counter_other < len(names):
    print(names[counter_other])
    if names[counter_other] == 'mark stanton':
        continue
    counter_other += 1
else:
    print("loop completed with continuestatement")
    
    
# While true 
# used a lot and must have a break statement in the body of the loop 


list_of_names = []
while True:
    name = input("Enter a name for the guest list, of X to quite")
    if name.lower == "X":
        break
    list_of_names.append(name)
    
# case fold 
list_of_names = []
while True:
    name = input("Enter a name for the guest list, of X to quite")
    if name.casefold() == "x":#locale-specific conversion to lower case
        break
    list_of_names.append(name)
    